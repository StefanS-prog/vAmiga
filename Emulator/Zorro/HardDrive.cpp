// -----------------------------------------------------------------------------
// This file is part of vAmiga
//
// Copyright (C) Dirk W. Hoffmann. www.dirkwhoffmann.de
// Licensed under the GNU General Public License v3
//
// See https://www.gnu.org for license information
// -----------------------------------------------------------------------------

#include "config.h"
#include "HardDrive.h"
#include "HDFFile.h"
#include "Memory.h"

/* Auto boot driver from AmiEmu. Written by mras0.
 * https://github.com/mras0/AmiEmu/blob/master/exprom.asm
 * https://github.com/dirkwhoffmann/vAmiga/issues/651
 */
const unsigned char exprom[880] = {
0x90, 0x00, 0x00, 0xde, 0x00, 0xb4, 0x00, 0xa2, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x4a, 0xfc,
0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xde, 0x81, 0x00, 0x03, 0x14, 0x00, 0x00, 0x00, 0x28,
0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x4c, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x64, 0x65,
0x76, 0x69, 0x63, 0x65, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x30, 0x2e, 0x31, 0x00, 0x64,
0x6f, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x01, 0x46, 0x00, 0x00, 0x02, 0xc6,
0x00, 0x00, 0x03, 0x3a, 0x00, 0x00, 0x03, 0x78, 0x00, 0x00, 0x03, 0x7c, 0x00, 0x00, 0x03, 0x80,
0x00, 0x00, 0x03, 0xac, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x08, 0x03, 0x00, 0xc0, 0x00,
0x00, 0x0a, 0x00, 0x00, 0x00, 0x28, 0xe0, 0x00, 0x00, 0x0e, 0x06, 0x00, 0xd0, 0x00, 0x00, 0x14,
0x00, 0x00, 0xd0, 0x00, 0x00, 0x16, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x35,
0x00, 0x00, 0x43, 0xfa, 0xff, 0x9b, 0x4e, 0xae, 0xff, 0xa0, 0x20, 0x40, 0x20, 0x68, 0x00, 0x16,
0x4e, 0x90, 0x4e, 0x75, 0x22, 0x7c, 0x00, 0x00, 0x01, 0x1e, 0x93, 0xfc, 0x00, 0x00, 0x00, 0x00,
0xd3, 0xc8, 0x22, 0x0a, 0x30, 0x19, 0x6b, 0x06, 0xd3, 0xb2, 0x00, 0x00, 0x60, 0xf6, 0x22, 0x08,
0x30, 0x19, 0x6b, 0x06, 0xd3, 0xb2, 0x00, 0x00, 0x60, 0xf6, 0x70, 0x01, 0x4e, 0x75, 0x00, 0x10,
0x00, 0x14, 0x00, 0x1c, 0x00, 0x20, 0x00, 0x24, 0x00, 0x50, 0x00, 0x54, 0x00, 0x82, 0x00, 0x9c,
0xff, 0xff, 0x00, 0x58, 0x00, 0x5c, 0x00, 0x60, 0x00, 0x64, 0x00, 0x68, 0x00, 0x6c, 0x00, 0x70,
0xff, 0xff, 0x44, 0x48, 0x30, 0x00, 0x48, 0xe7, 0x7f, 0xfe, 0x2a, 0x40, 0x2b, 0x4e, 0x00, 0x22,
0x2b, 0x48, 0x00, 0x26, 0x99, 0xcc, 0x43, 0xfa, 0x01, 0x5c, 0x70, 0x00, 0x4e, 0xae, 0xfd, 0xd8,
0x4a, 0x80, 0x67, 0x00, 0x01, 0x32, 0x28, 0x40, 0x2c, 0x4c, 0x41, 0xed, 0x00, 0x2a, 0x70, 0x04,
0x4e, 0xae, 0xff, 0x76, 0x2c, 0x2d, 0x00, 0x2a, 0x67, 0x00, 0x01, 0x1c, 0x20, 0x46, 0x2b, 0x68,
0x00, 0x20, 0x00, 0x2a, 0x08, 0xa8, 0x00, 0x01, 0x00, 0x0e, 0x9f, 0xfc, 0x00, 0x00, 0x00, 0x48,
0x26, 0x4f, 0x41, 0xfa, 0xff, 0xae, 0x27, 0x48, 0x00, 0x00, 0x41, 0xfa, 0xfe, 0xcc, 0x27, 0x48,
0x00, 0x04, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0c, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x80,
0x00, 0x14, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x01,
0x00, 0x1c, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x0a,
0x00, 0x24, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x28, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00,
0x00, 0x2c, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00,
0x00, 0x34, 0x27, 0x7c, 0x00, 0x00, 0x03, 0xe7, 0x00, 0x38, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x01,
0x00, 0x3c, 0x27, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x27, 0x7c, 0x44, 0x48, 0x30, 0x00,
0x00, 0x44, 0x41, 0xfa, 0x01, 0x8c, 0x20, 0x8b, 0x31, 0x7c, 0xfe, 0xdf, 0x00, 0x04, 0x20, 0x4b,
0x4e, 0xae, 0xff, 0x70, 0xdf, 0xfc, 0x00, 0x00, 0x00, 0x48, 0x2e, 0x00, 0x67, 0x58, 0x0c, 0x6e,
0x00, 0x24, 0x00, 0x14, 0x65, 0x12, 0x20, 0x47, 0x22, 0x46, 0x70, 0x00, 0x72, 0x01, 0x4e, 0xae,
0xff, 0xdc, 0x4a, 0x80, 0x67, 0x40, 0x60, 0x3a, 0x2c, 0x6d, 0x00, 0x22, 0x70, 0x14, 0x22, 0x3c,
0x00, 0x01, 0x00, 0x01, 0x2c, 0x6d, 0x00, 0x22, 0x4e, 0xae, 0xff, 0x3a, 0x4a, 0x80, 0x67, 0x00,
0x00, 0x26, 0x22, 0x40, 0x13, 0x7c, 0x00, 0x10, 0x00, 0x08, 0x23, 0x46, 0x00, 0x0a, 0x23, 0x47,
0x00, 0x10, 0x41, 0xec, 0x00, 0x4a, 0x4e, 0xae, 0xff, 0x7c, 0x4e, 0xae, 0xfe, 0xf2, 0x4e, 0xae,
0xff, 0x76, 0x20, 0x0d, 0x60, 0x02, 0x70, 0x00, 0x2c, 0x6d, 0x00, 0x22, 0xb9, 0xfc, 0x00, 0x00,
0x00, 0x00, 0x67, 0x0a, 0x2f, 0x00, 0x22, 0x4c, 0x4e, 0xae, 0xfe, 0x62, 0x20, 0x1f, 0x4c, 0xdf,
0x7f, 0xfe, 0x4e, 0x75, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6c, 0x69,
0x62, 0x72, 0x61, 0x72, 0x79, 0x00, 0x48, 0xe7, 0xff, 0xfe, 0x50, 0x6e, 0x00, 0x20, 0x24, 0x49,
0x4a, 0x80, 0x66, 0x5a, 0x20, 0x3c, 0x00, 0x00, 0x00, 0x2a, 0x22, 0x3c, 0x00, 0x01, 0x00, 0x01,
0x26, 0x4e, 0x2c, 0x6b, 0x00, 0x22, 0x4e, 0xae, 0xff, 0x3a, 0x2c, 0x4b, 0x4a, 0x80, 0x67, 0x00,
0x00, 0x3e, 0x26, 0x40, 0x27, 0x4e, 0x00, 0x26, 0x17, 0x7c, 0x00, 0x02, 0x00, 0x0e, 0x17, 0x7c,
0x00, 0x04, 0x00, 0x08, 0x41, 0xfa, 0xfd, 0x62, 0x27, 0x48, 0x00, 0x0a, 0x25, 0x4b, 0x00, 0x18,
0x50, 0x6e, 0x00, 0x20, 0x50, 0x6b, 0x00, 0x24, 0x70, 0x00, 0x15, 0x40, 0x00, 0x1f, 0x15, 0x7c,
0x00, 0x07, 0x00, 0x08, 0x51, 0x6e, 0x00, 0x20, 0x4c, 0xdf, 0x7f, 0xff, 0x4e, 0x75, 0x70, 0xff,
0x15, 0x40, 0x00, 0x1f, 0x25, 0x40, 0x00, 0x14, 0x60, 0xea, 0x48, 0xe7, 0xff, 0xfe, 0x26, 0x69,
0x00, 0x18, 0x70, 0x00, 0x23, 0x40, 0x00, 0x18, 0x23, 0x40, 0x00, 0x14, 0x51, 0x6b, 0x00, 0x24,
0x66, 0x14, 0x2a, 0x4e, 0x22, 0x4b, 0x20, 0x3c, 0x00, 0x00, 0x00, 0x2a, 0x2c, 0x6e, 0x00, 0x22,
0x4e, 0xae, 0xff, 0x2e, 0x2c, 0x4d, 0x70, 0x00, 0x51, 0x6e, 0x00, 0x20, 0x66, 0x04, 0x61, 0x00,
0x00, 0x08, 0x4c, 0xdf, 0x7f, 0xff, 0x4e, 0x75, 0x70, 0x03, 0x60, 0xfc, 0x70, 0x04, 0x60, 0xfc,
0x48, 0xe7, 0xff, 0xfe, 0x13, 0x7c, 0x00, 0x05, 0x00, 0x08, 0x41, 0xfa, 0x00, 0x24, 0x20, 0x89,
0x31, 0x7c, 0xfe, 0xde, 0x00, 0x04, 0x08, 0x29, 0x00, 0x00, 0x00, 0x1e, 0x66, 0x08, 0x2c, 0x6e,
0x00, 0x22, 0x4e, 0xae, 0xfe, 0x86, 0x4c, 0xdf, 0x7f, 0xff, 0x4e, 0x75, 0x70, 0x06, 0x60, 0xfc,
};

HardDrive::HardDrive(Amiga& ref) : ZorroBoard(ref)
{
#ifdef INITIAL_HDF
    
    try {
        
        hdf = new HDFFile(INITIAL_HDF);
    
        debug(true, "HDF file loaded successfully\n");
        hdf->layout().dump();

        state = STATE_AUTOCONF;

    } catch (...) {
        
        debug(true, "Cannot open HDF file %s\n", INITIAL_HDF);
        
        state = STATE_AUTOCONF;
    }
    
#endif
}

void
HardDrive::_dump(dump::Category category, std::ostream& os) const
{
    using namespace util;
        
    ZorroBoard::_dump(category, os);
    
    if (category & dump::State) {
    
    }
}

void
HardDrive::_reset(bool hard)
{
    RESET_SNAPSHOT_ITEMS(hard)

    if (hard) {

        // state = STATE_SHUTUP;
        state = STATE_AUTOCONF;
    }
}

u8
HardDrive::peek8(u32 addr) const
{
    isize offset = (isize)(addr & 0xFFFF) - (isize)initDiagVec();
    u8 result = (usize)offset < sizeof(exprom) ? exprom[offset] : 0;

    trace(HDR_DEBUG, "peek8(%06x) = %02x\n", addr, result);
    return result;
}

u16
HardDrive::peek16(u32 addr) const
{
    auto hi = peek8(addr);
    auto lo = peek8(addr + 1);

    u16 result = HI_LO(hi,lo);

    trace(HDR_DEBUG, "peek16(%06x) = %04x\n", addr, result);
    return result;
}

void
HardDrive::poke8(u32 addr, u8 value)
{
    trace(HDR_DEBUG, "poke8(%06x,%02x)\n", addr, value);
    
    // TODO
}

void
HardDrive::poke16(u32 addr, u16 value)
{
    trace(HDR_DEBUG, "poke16(%06x,%04x)\n", addr, value);
    
    // TODO
}

void
HardDrive::updateMemSrcTables()
{
    // Only proceed if this board has been configured
    if (baseAddr == 0) return;
    
    // Map in this device
    mem.cpuMemSrc[firstPage()] = MEM_HDR;
}
